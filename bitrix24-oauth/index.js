require('dotenv').config();
const express = require('express');
const cors = require('cors');
const logger = require('./middleware/logger');
const corsOptions = require('./middleware/corsConfig');

const authRoutes = require('./routes/authRoutes');
const contactRoutes = require('./routes/contactRoutes');
const miscRoutes = require('./routes/miscRoutes');

const ngrok = require('ngrok'); // Th√™m Ngrok
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());
app.use(cors(corsOptions));
app.use(logger);

app.use('/', authRoutes);
app.use('/', contactRoutes);
app.use('/', miscRoutes);

// H√†m kh·ªüi ƒë·ªông server v√† Ngrok
async function startServer() {
  try {
    // Kh·ªüi ƒë·ªông server Express
    const server = await new Promise((resolve, reject) => {
      const serverInstance = app.listen(port, () => {
        console.log(`üöÄ Server ch·∫°y t·∫°i port ${port}`);
        resolve(serverInstance);
      }).on('error', (err) => {
        if (err.code === 'EADDRINUSE') {
          console.error(`‚ùå C·ªïng ${port} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`);
          reject(new Error(`C·ªïng ${port} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`));
        } else {
          reject(err);
        }
      });
    });

    // ƒê·ª£i 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o server ·ªïn ƒë·ªãnh
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Kh·ªüi ƒë·ªông Ngrok
    const ngrokUrl = await ngrok.connect({
      addr: port,
      authtoken: process.env.NGROK_AUTH_TOKEN // S·ª≠ d·ª•ng token t·ª´ .env (n·∫øu c√≥)
    });
    console.log(`üåê Ngrok URL: ${ngrokUrl}`);

    // C·∫≠p nh·∫≠t REDIRECT_URI n·∫øu c·∫ßn (v√≠ d·ª• cho OAuth)
    process.env.REDIRECT_URI = `${ngrokUrl}/callback`;
    console.log(`üîó REDIRECT_URI: ${process.env.REDIRECT_URI}`);

    return server; // Tr·∫£ v·ªÅ instance server n·∫øu c·∫ßn
  } catch (err) {
    console.error('‚ùå L·ªói kh·ªüi ch·∫°y server ho·∫∑c Ngrok:', err.message);
    console.error('Chi ti·∫øt l·ªói:', err.stack);
    process.exit(1);
  }
}

// Ch·∫°y server v√† Ngrok
startServer();